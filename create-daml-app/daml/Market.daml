module Market where

import DA.Date
import Daml.Trigger
import DA.Foldable(forA_)


-- MAIN_TEMPLATE_BEGIN
template User with
    username: Party
    following: [Party]
  where
    signatory username
    observer following
-- MAIN_TEMPLATE_END

    key username: Party
    maintainer key

    -- FOLLOW_BEGIN
    nonconsuming choice Follow: ContractId User with
        userToFollow: Party
      controller username
      do
        assertMsg "You cannot follow yourself" (userToFollow /= username)
        assertMsg "You cannot follow the same user twice" (notElem userToFollow following)
        archive self
        create this with following = userToFollow :: following
    -- FOLLOW_END

    nonconsuming choice NewSellOffer : ()
      with
        observers : [Party]
        title : Text
        description : Text
        price : Int
      controller username
        do
          now <- getTime
          create $ SellOffer {seller = username, date = toDateUTC now, ..}
          pure ()

    nonconsuming choice TakeSellOffer : ()
      with
        offer : ContractId SellOffer
      controller username
        do
          exercise offer DoTrade with tradePartner = username
          pure ()

    nonconsuming choice ConfirmPayment : ()
      with
        invoice : ContractId Invoice
      controller username
        do
          Invoice{..} <- fetch invoice
          assert $ owner == username
          create $ PaymentConfirmation
                      with
                        invoice = invoice
                        party = username
                        obligor = obligor
          pure ()


template SellOffer
  with
    observers : [Party]
    title : Text
    description : Text
    price : Int
    seller : Party
    date : Date
  where
    signatory seller
    observer observers

    nonconsuming choice DoTrade : ()
      with
        tradePartner : Party
      controller tradePartner
        do
          assert $ tradePartner `elem` observers
          archive self
          create $ Invoice {owner = seller, obligor = tradePartner, amount = price, description = title}
          pure ()



template Invoice
  with
    owner : Party
    obligor : Party
    amount : Int
    description : Text
  where
    signatory obligor
    observer owner

template PaymentConfirmation
  with
    invoice : ContractId Invoice
    party : Party
    obligor : Party
  where
    signatory party
    observer obligor

    nonconsuming choice ArchiveInvoice : ()
      controller obligor
      do
        archive invoice
        archive self




deleteInvoiceTrigger : Trigger ()
deleteInvoiceTrigger = Trigger
  { initialize = return ()
  , updateState = const ( return () )
  , rule = deleteInvoiceRule
  , registeredTemplates = RegisteredTemplates
      [ registeredTemplate @Invoice
      , registeredTemplate @PaymentConfirmation
      ]
  , heartbeat = None
  }


deleteInvoiceRule : Party -> TriggerA () ()
deleteInvoiceRule party = do
  invoices <- query @Invoice
  confirmations <- query @PaymentConfirmation
  
  let ready = do
              (confirmationCid, PaymentConfirmation{invoice, obligor}) <- confirmations
              (invoiceCid, Invoice{}) <- invoices
              guard $ invoiceCid == invoice
              guard $ party == obligor
              pure confirmationCid

  forA_ ready $ \confirmationCid -> dedupExercise confirmationCid ArchiveInvoice